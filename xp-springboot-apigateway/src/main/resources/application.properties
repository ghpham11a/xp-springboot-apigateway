spring.application.name=xp-springboot-apigateway

# Tells Spring Security which issuer to trust when validating tokens
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-ngpxhgormngd30wg.us.auth0.com/

# (Optional) for your own reference or custom checks
auth0.audience=https://dev-ngpxhgormngd30wg.us.auth0.com/api/v2/
auth0.clientId=jdTddtjf3DuiU17IbD81m2pNDr0YOxq9

# -----------------------------------------------------
# Run the Gateway itself on port 8080 (default is 8080,
# but shown here for clarity).
# -----------------------------------------------------
server.port=8080

# -----------------------------------------------------
# Spring Cloud Gateway route definitions in properties
# format. This defines a single route to xp-springboot-service.
# -----------------------------------------------------

# 1) Unique ID for this route
spring.cloud.gateway.routes[0].id=xp-springboot-route

# 2) The destination of this route (the K8s Service name + port)
spring.cloud.gateway.routes[0].uri=http://xp-springboot-service:8080

# 3) Predicate: Match any request path that starts with /api/accounts
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/accounts/**

# 4) (Optional) Filter: Strip the first segment (/api) so that
#    xp-springboot sees requests as /accounts/** instead.
#    If your xp-springboot service is already mapped to /api/accounts,
#    you can omit this line. If xp-springboot is mapped to /accounts,
#    then you need this filter:
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1


# -----------------------------------------------------
# (Optional) Example logging. Helpful for seeing 
# what the Gateway is doing.
# -----------------------------------------------------
logging.level.org.springframework.cloud.gateway=DEBUG